pipeline{
    agent any
          parameters {
          choice(name: 'TerraformAction', choices: 'Deploy\nDestroy', description: 'Select the action to perform')
                   }
          environment {
          CLOUDSDK_CORE_PROJECT='devops-project-1-419603'    
          GCP_SERVICE_ACCOUNT = credentials('gce-secret-key') 
          TF_VAR_instance_ips = ''
                   }
    stages{           
           stage('Git checkout'){
              steps{
              git credentialsId: 'jenkins-personal-access-token', url: 'https://github.com/mshan011181/Terraform-jenkins-gcp.git'
                     }
                  }
           stage('Initialize'){                  
                          when {
                          expression {
                         // return params.TerraformAction == 'Deploy'
                         return params.TerraformAction == 'Deploy' || params.TerraformAction == 'Destroy'
                                     }    
                            }                                      
                     steps{ 
                         sh '''
                         export GOOGLE_APPLICATION_CREDENTIALS=/home/shandba90/jenkins-gce.json
                         terraform init -reconfigure                                  
                         '''
                            }
                 }
          stage('Plan'){
                          when {
                          expression {
                         // return params.TerraformAction == 'Deploy'
                         return params.TerraformAction == 'Deploy' || params.TerraformAction == 'Destroy'
                             }
                          } 
                          steps{ 
                          sh '''
                          export GOOGLE_APPLICATION_CREDENTIALS=/home/shandba90/jenkins-gce.json 
                          terraform plan
                          ''' 
                             }
                    }
        stage('Apply'){
                          when {
                          expression {
                          return params.TerraformAction == 'Deploy'
                               }
                             } 
                   steps {  
                       script {   
                            sh '''
                              export GOOGLE_APPLICATION_CREDENTIALS=/home/shandba90/jenkins-gce.json
                              terraform apply -auto-approve  
                               terraform output -raw instance_public_ip > /tmp/ip_addr.txt
                                 ## ip_address=`cat /tmp/ip_addr.txt`
                                 ## echo $ip_address  >>  inventory
                               ''' 
                               // Capture the public IP addresses of the created instances
                             // def instancePublicIPs = sh(script: 'terraform output -json instance_public_ip', returnStdout: true).trim()
                               //   def instancePublicIPs = sh(script: 'terraform output -raw instance_ip')
                              // Set the instance IP addresses as an environment variable
                              // env.TF_VAR_instance_ips = instancePublicIPs
                             }
                        }
                  }     
        
             stage('Ansible Provision') {
                when {
                          expression {
                         // return params.TerraformAction == 'Deploy'
                         return params.TerraformAction == 'Deploy'
                                     }    
                            }       
                steps {
                         git credentialsId: 'jenkins-personal-access-token', url: 'https://github.com/mshan011181/Terraform-jenkins-gcp.git'
                     script {
                            // Define the extra variables including ansible_ssh_common_args
                             // def extraVars = "-e 'ansible_ssh_common_args=\"-o StrictHostKeyChecking=no\"'"         
                  // Run Ansible playbook to configure the instances
                  sh '''
                    export GOOGLE_APPLICATION_CREDENTIALS=/home/shandba90/jenkins-gce.json 
                    terraform plan
                    terraform apply -auto-approve  
                    terraform output -raw instance_public_ip > /tmp/ip_addr.txt
                  ip_address=`cat /tmp/ip_addr.txt`
                  echo $ip_address  >>  inventory                    
                  export ANSIBLE_CONFIG=/bitnami/jenkins/home/ansible.cfg
                  ansible-playbook -i inventory playbook.yaml 
                   '''
                            }
                     }
              }
             stage('destroy'){
                           when {
                          expression {
                          return params.TerraformAction == 'Destroy'
                                  }    
                            }  
                           steps{               
                           sh ''' 
                             export GOOGLE_APPLICATION_CREDENTIALS=/home/shandba90/jenkins-gce.json 
                             terraform state list
                             terraform state rm google_project_service.compute_service
                             terraform destroy -auto-approve
                            '''
                                 }
                       }
        }
}
